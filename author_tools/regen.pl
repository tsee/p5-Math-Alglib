#!perl
use strict;
use warnings;
use Capture::Tiny qw(capture_stdout);

my $struct_to_hash = "author_tools/struct_to_hash.pl";
my $outfile = "src/perl_conversion_functions.h";

print "Writing output to file '$outfile'.\n";

open my $fh, ">", $outfile or die $!;
print $fh <<"HERE";
#ifndef PERL_CONVERSION_FUNCTIONS_H_
#define PERL_CONVERSION_FUNCTIONS_H_

/* WARNING!
 * This code is autogenerated. Have a look at author_tools/regen.pl and
 * its friend author_tools/struct_to_hash.pl!
 */

#include <EXTERN.h>
#include <perl.h>

HERE

my $typemap = "xsp/mytype.map";
my $functions = [
  {
    file => "src/diffequations.h",
    struct_name => "odesolverstate",
    struct_fq => "alglib_impl::odesolverstate",
    c_to_perl_function => "odesolverstate_to_perl_hash",
  },
];

# emit header include
foreach my $func (@$functions) {
  my $header = $func->{file};
  $header =~ s/^src\///; # FIXME hack
  print $fh "#include <$header>\n";
}

print $fh "\nusing namespace alglib; /* FIXME hack */\n\n";

# emit function bodies
foreach my $func (@$functions) {
  my @cmd = (
    $^X,
    $struct_to_hash,
    "--typemap", $typemap,
    (map {("--$_", $func->{$_})} keys %$func)
  );

  print "Regenerating function '$func->{c_to_perl_function}' from struct '$func->{struct_name}' in '$func->{file}'...\n";
  my $stdout = capture_stdout {
    system(@cmd) and die "Failed to run '@cmd': $!";
  };

  #print $fh "\n#line 1 \"@cmd\"\n";
  print $fh $stdout;
}

print $fh <<HERE;

#endif
HERE

