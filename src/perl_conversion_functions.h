#ifndef PERL_CONVERSION_FUNCTIONS_H_
#define PERL_CONVERSION_FUNCTIONS_H_

/* WARNING!
 * This code is autogenerated. Have a look at author_tools/regen.pl and
 * its friend author_tools/struct_to_hash.pl!
 */

#include <EXTERN.h>
#include <perl.h>

#include <diffequations.h>

using namespace alglib; /* FIXME hack */

SV *
odesolverstate_to_perl_hash(pTHX_ alglib_impl::odesolverstate *strct)
{
  SV *retval;
  HV *hv;
  SV **elem;
  SV *sv;
  if (strct == NULL)
    return &PL_sv_undef;
  hv = newHV();
  retval = newRV_noinc((SV *)hv);

  elem = hv_fetchs(hv, "n", 1); /* 1 => lvalue, O_RDWR|O_CREAT mode, so to speak */
  assert(elem);
  sv = *elem;
  sv_setiv(sv, (IV)strct->n);

  elem = hv_fetchs(hv, "m", 1); /* 1 => lvalue, O_RDWR|O_CREAT mode, so to speak */
  assert(elem);
  sv = *elem;
  sv_setiv(sv, (IV)strct->m);

  elem = hv_fetchs(hv, "xscale", 1); /* 1 => lvalue, O_RDWR|O_CREAT mode, so to speak */
  assert(elem);
  sv = *elem;
  sv_setnv(sv, (double)strct->xscale);

  elem = hv_fetchs(hv, "h", 1); /* 1 => lvalue, O_RDWR|O_CREAT mode, so to speak */
  assert(elem);
  sv = *elem;
  sv_setnv(sv, (double)strct->h);

  elem = hv_fetchs(hv, "eps", 1); /* 1 => lvalue, O_RDWR|O_CREAT mode, so to speak */
  assert(elem);
  sv = *elem;
  sv_setnv(sv, (double)strct->eps);

  elem = hv_fetchs(hv, "fraceps", 1); /* 1 => lvalue, O_RDWR|O_CREAT mode, so to speak */
  assert(elem);
  sv = *elem;
  sv = boolSV(strct->fraceps);

  elem = hv_fetchs(hv, "solvertype", 1); /* 1 => lvalue, O_RDWR|O_CREAT mode, so to speak */
  assert(elem);
  sv = *elem;
  sv_setiv(sv, (IV)strct->solvertype);

  elem = hv_fetchs(hv, "needdy", 1); /* 1 => lvalue, O_RDWR|O_CREAT mode, so to speak */
  assert(elem);
  sv = *elem;
  sv = boolSV(strct->needdy);

  elem = hv_fetchs(hv, "x", 1); /* 1 => lvalue, O_RDWR|O_CREAT mode, so to speak */
  assert(elem);
  sv = *elem;
  sv_setnv(sv, (double)strct->x);

  elem = hv_fetchs(hv, "repterminationtype", 1); /* 1 => lvalue, O_RDWR|O_CREAT mode, so to speak */
  assert(elem);
  sv = *elem;
  sv_setiv(sv, (IV)strct->repterminationtype);

  elem = hv_fetchs(hv, "repnfev", 1); /* 1 => lvalue, O_RDWR|O_CREAT mode, so to speak */
  assert(elem);
  sv = *elem;
  sv_setiv(sv, (IV)strct->repnfev);

  return retval;
} /* end of odesolverstate_to_perl_hash */

#endif
