#include <vector>
#include <statistics.h>
#include <ap.h>

%module{Math::Alglib};
%package{Math::Alglib::Statistics};



std::vector<double>
samplemoments(alglib::real_1d_array sample)
  %code{%
    RETVAL.resize(4);
    alglib::samplemoments(sample, RETVAL[0], RETVAL[1], RETVAL[2], RETVAL[3]);
  %};

double samplemean(alglib::real_1d_array x);
double samplevariance(alglib::real_1d_array x);
double sampleskewness(alglib::real_1d_array x);
double samplekurtosis(alglib::real_1d_array x);

double
samplemedian(alglib::real_1d_array sample)
  %code{% alglib::samplemedian(sample, RETVAL); %};

double
samplepercentile(alglib::real_1d_array sample, double p)
  %code{%
    if (sample.length() == 0)
      croak("Need non-zero sample size");
    alglib::samplepercentile(sample, p, RETVAL);
  %};

double cov2(alglib::real_1d_array x, alglib::real_1d_array y)
  %catch{ApError};

double pearsoncorr2(alglib::real_1d_array x, alglib::real_1d_array y)
  %catch{ApError};

double spearmancorr2(alglib::real_1d_array x, alglib::real_1d_array y)
  %catch{ApError};

// TODO: Matrices IN/OUT:
// TODO: void covm(const real_2d_array &x, real_2d_array &c);
// TODO: void pearsoncorrm(const real_2d_array &x, real_2d_array &c);
// TODO: void spearmancorrm(const real_2d_array &x, real_2d_array &c);
// TODO: void covm2(const real_2d_array &x, const real_2d_array &y, real_2d_array &c);
// TODO: void pearsoncorrm2(const real_2d_array &x, const real_2d_array &y, real_2d_array &c);
// TODO: void spearmancorrm2(const real_2d_array &x, const real_2d_array &y, real_2d_array &c);

std::vector<double>
pearsoncorrelationsignificance(const double r, const ptrdiff_t n)
  %code{%
    RETVAL.resize(3);
    alglib::pearsoncorrelationsignificance(r, n, RETVAL[0], RETVAL[1], RETVAL[2]);
  %};

std::vector<double>
spearmanrankcorrelationsignificance(const double r, const ptrdiff_t n)
  %code{%
    RETVAL.resize(3);
    alglib::spearmanrankcorrelationsignificance(r, n, RETVAL[0], RETVAL[1], RETVAL[2]);
  %};

std::vector<double>
mannwhitneyutest(alglib::real_1d_array x, alglib::real_1d_array y)
  %code{%
    RETVAL.resize(3);
    alglib::mannwhitneyutest(x, x.length(), y, y.length(), RETVAL[0], RETVAL[1], RETVAL[2]);
  %};

double jarqueberatest(alglib::real_1d_array sample)
  %code{%
    try {
      alglib::jarqueberatest(sample, sample.length(), RETVAL);
    }
    catch (alglib::ap_error& e) { croak("%s", e.msg.c_str()); }
    catch (...) {
      croak("Caught C++ exception of unknown type");
    }
  %};

