#include <vector>
#include <statistics.h>
#include <ap.h>

#include <perl_myinit.h>

%module{Math::Alglib};
%package{Math::Alglib::Statistics};



std::vector<double>
samplemoments(real_1d_array sample)
  %code{%
    RETVAL.resize(4);
    alglib::samplemoments(sample, RETVAL[0], RETVAL[1], RETVAL[2], RETVAL[3]);
  %};

double samplemean(real_1d_array x);
double samplevariance(real_1d_array x);
double sampleskewness(real_1d_array x);
double samplekurtosis(real_1d_array x);

double
samplemedian(real_1d_array sample)
  %code{% alglib::samplemedian(sample, RETVAL); %};

double
samplepercentile(real_1d_array sample, double p)
  %code{%
    if (sample.length() == 0)
      croak("Need non-zero sample size");
    alglib::samplepercentile(sample, p, RETVAL);
  %};

double cov2(real_1d_array x, real_1d_array y)
  %catch{ApError}; // FIXME leak on exception?

double pearsoncorr2(real_1d_array x, real_1d_array y)
  %catch{ApError};

double spearmancorr2(real_1d_array x, real_1d_array y)
  %catch{ApError};

real_2d_array covm(real_2d_array x)
  %code{% alglib::covm(x, RETVAL); %};

real_2d_array pearsoncorrm(real_2d_array x)
  %code{% alglib::pearsoncorrm(x, RETVAL); %};

real_2d_array spearmancorrm(real_2d_array x)
  %code{% alglib::spearmancorrm(x, RETVAL); %};

real_2d_array covm2(real_2d_array x, real_2d_array y)
  %code{% alglib::covm2(x, y, RETVAL); %};

real_2d_array pearsoncorrm2(real_2d_array x, real_2d_array y)
  %code{% alglib::pearsoncorrm2(x, y, RETVAL); %};

real_2d_array spearmancorrm2(real_2d_array x, real_2d_array y)
  %code{% alglib::spearmancorrm2(x, y, RETVAL); %};

std::vector<double>
pearsoncorrelationsignificance(const double r, const ptrdiff_t n)
  %code{%
    RETVAL.resize(3);
    alglib::pearsoncorrelationsignificance(r, n, RETVAL[0], RETVAL[1], RETVAL[2]);
  %};

std::vector<double>
spearmanrankcorrelationsignificance(const double r, const ptrdiff_t n)
  %code{%
    RETVAL.resize(3);
    alglib::spearmanrankcorrelationsignificance(r, n, RETVAL[0], RETVAL[1], RETVAL[2]);
  %};

std::vector<double>
mannwhitneyutest(real_1d_array x, real_1d_array y)
  %code{%
    RETVAL.resize(3);
    alglib::mannwhitneyutest(x, x.length(), y, y.length(), RETVAL[0], RETVAL[1], RETVAL[2]);
  %};

double jarqueberatest(real_1d_array sample)
  %code{%
    try {
      alglib::jarqueberatest(sample, sample.length(), RETVAL);
    }
    catch (alglib::ap_error& e) {
      // FIXME leak?
      croak("%s", e.msg.c_str());
    }
    catch (...) {
      croak("Caught C++ exception of unknown type");
    }
  %};

std::vector<double>
onesamplesigntest(real_1d_array x, const double median)
  %code{%
    RETVAL.resize(3);
    alglib::onesamplesigntest(x, x.length(), median, RETVAL[0], RETVAL[1], RETVAL[2]);
  %};

std::vector<double>
studentttest1(real_1d_array x, const double mean)
  %code{%
    RETVAL.resize(3);
    alglib::studentttest1(x, x.length(), mean, RETVAL[0], RETVAL[1], RETVAL[2]);
  %};

std::vector<double>
studentttest2(real_1d_array x, real_1d_array y)
  %code{%
    RETVAL.resize(3);
    alglib::studentttest2(x, x.length(), y, y.length(), RETVAL[0], RETVAL[1], RETVAL[2]);
  %};

std::vector<double>
unequalvariancettest(real_1d_array x, real_1d_array y)
  %code{%
    RETVAL.resize(3);
    alglib::unequalvariancettest(x, x.length(), y, y.length(), RETVAL[0], RETVAL[1], RETVAL[2]);
  %};

std::vector<double>
ftest(real_1d_array x, real_1d_array y)
  %code{%
    RETVAL.resize(3);
    alglib::ftest(x, x.length(), y, y.length(), RETVAL[0], RETVAL[1], RETVAL[2]);
  %};

std::vector<double>
onesamplevariancetest(real_1d_array x, const double variance)
  %code{%
    RETVAL.resize(3);
    alglib::onesamplevariancetest(x, x.length(), variance, RETVAL[0], RETVAL[1], RETVAL[2]);
  %};

std::vector<double>
wilcoxonsignedranktest(real_1d_array x, const double median)
  %code{%
    RETVAL.resize(3);
    alglib::wilcoxonsignedranktest(x, x.length(), median, RETVAL[0], RETVAL[1], RETVAL[2]);
  %};

