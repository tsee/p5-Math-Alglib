#include <vector>
#include <interpolation.h>
#include <ap.h>

#include <perl_myinit.h>

%module{Math::Alglib};
%package{Math::Alglib::Interpolation};

//////////////////////////////////////////////////////////////////////
%name{Math::Alglib::Interpolation::IdwInterpolant}
class idwinterpolant {
  ~idwinterpolant();

  double
  idwcalc(real_1d_array x)
    %code{%
      RETVAL = alglib::idwcalc(*THIS, x);
    %};
};

//////////////////////////////////////////////////////////////////////
%name{Math::Alglib::Interpolation::BarycentricInterpolant}
class barycentricinterpolant {
  ~barycentricinterpolant();

  double
  barycentriccalc(const double t)
    %code{%
      RETVAL = alglib::barycentriccalc(*THIS, t);
    %};

  std::vector<double>
  barycentricdiff1(const double t)
    %code{%
      RETVAL.resize(2);
      alglib::barycentricdiff1(*THIS, t, RETVAL[0], RETVAL[1]);
    %};

  std::vector<double>
  barycentricdiff2(const double t)
    %code{%
      RETVAL.resize(3);
      alglib::barycentricdiff2(*THIS, t, RETVAL[0], RETVAL[1], RETVAL[2]);
    %};

  void
  barycentriclintransx(const double ca, const double cb)
    %code{% alglib::barycentriclintransx(*THIS, ca, cb); %};

  void
  barycentriclintransy(const double ca, const double cb)
    %code{% alglib::barycentriclintransy(*THIS, ca, cb); %};

  void
  barycentricunpack()
    %code%{
      ae_int_t n;
      real_1d_array x, y, w;
      barycentricunpack(*THIS, n, x, y, w);
      EXTEND(SP, 4);
      mPUSHi(n);
      mPUSHs(sv_2mortal(newRV_noinc((SV *)real_1d_array_to_av(aTHX_ x))));
      mPUSHs(sv_2mortal(newRV_noinc((SV *)real_1d_array_to_av(aTHX_ y))));
      mPUSHs(sv_2mortal(newRV_noinc((SV *)real_1d_array_to_av(aTHX_ w))));
      XSRETURN(4);
    %};

  real_1d_array
  polynomialbar2cheb(const double a, const double b)
    %code{% alglib::polynomialbar2cheb(*THIS, a, b, RETVAL); %};

  real_1d_array
  polynomialbar2pow(const double c, const double s)
    %code{% alglib::polynomialbar2pow(*THIS, c, s, RETVAL); %};
}; // end class barycentricinterpolant

//////////////////////////////////////////////////////////////////////
%name{Math::Alglib::Interpolation::RbfModel}
class rbfmodel {
  ~rbfmodel();

  std::string rbfserialize()
   %code{% alglib::rbfserialize(*THIS, RETVAL); %};

  void rbfsetpoints(real_2d_array xy)
    %code{% alglib::rbfsetpoints(*THIS, xy); %};

  void rbfsetalgoqnn(const double q, const double z)
    %code{% alglib::rbfsetalgoqnn(*THIS, q, z); %};

  void rbfsetalgomultilayer(const double rbase, const ae_int_t nlayers, const double lambdav)
    %code{% alglib::rbfsetalgomultilayer(*THIS, rbase, nlayers, lambdav); %};

  void rbfsetlinterm() %code{% alglib::rbfsetlinterm(*THIS); %};
  void rbfsetconstterm() %code{% alglib::rbfsetconstterm(*THIS); %};
  void rbfsetzeroterm() %code{% alglib::rbfsetzeroterm(*THIS); %};

  ae_int_t
  rbfbuildmodel()
    %code{%
      alglib::rbfreport rep;
      alglib::rbfbuildmodel(*THIS, rep);
      RETVAL = rep.terminationtype;
    %};

  double rbfcalc2(const double x0, const double x1)
    %code{% RETVAL = alglib::rbfcalc2(*THIS, x0, x1); %};

  double rbfcalc3(const double x0, const double x1, const double x2)
    %code{% RETVAL = alglib::rbfcalc3(*THIS, x0, x1, x2); %};

  real_1d_array
  rbfcalc(real_1d_array x)
    %code{% alglib::rbfcalc(*THIS, x, RETVAL); %};

  real_2d_array
  rbfgridcalc2(real_1d_array x0, const ae_int_t n0, real_1d_array x1, const ae_int_t n1)
    %code{% alglib::rbfgridcalc2(*THIS, x0, n0, x1, n1, RETVAL); %};

  AV*
  rbfunpack()
    %code{%
      sv_2mortal((SV *)RETVAL);
      ae_int_t nx, ny, nc;
      real_2d_array xwr, v;
      alglib::rbfunpack(*THIS, nx, ny, xwr, nc, v);
      av_extend(RETVAL, 4);
      av_store(RETVAL, 0, newSViv(nx));
      av_store(RETVAL, 1, newSViv(ny));
      av_store(RETVAL, 2, newRV_noinc((SV *)real_2d_array_to_av(aTHX_ xwr)));
      av_store(RETVAL, 3, newSViv(nc));
      av_store(RETVAL, 4, newRV_noinc((SV *)real_2d_array_to_av(aTHX_ v)));
    %};

}; // end class rbfmodel

//////////////////////////////////////////////////////////////////////
%package{Math::Alglib::Interpolation};
//////////////////////////////////////////////////////////////////////

{%
rbfmodel*
rbfunserialize(std::string s)
  CODE:
    const char CLASS[] = "Math::Alglib::Interpolation::RbfModel";
    RETVAL = new alglib::rbfmodel();
    alglib::rbfunserialize(s, *RETVAL);
  OUTPUT: RETVAL
%}

{%
rbfmodel*
rbfcreate(const ae_int_t nx, const ae_int_t ny)
  CODE:
    const char CLASS[] = "Math::Alglib::Interpolation::RbfModel";
    RETVAL = new alglib::rbfmodel();
    alglib::rbfcreate(nx, ny, *RETVAL);
  OUTPUT: RETVAL
%}

//////////////////////////////////////////////////////////////////////
idwinterpolant*
idwbuildmodifiedshepard(real_2d_array xy, const ae_int_t n, const ae_int_t nx,
                         const ae_int_t d, const ae_int_t nq, const ae_int_t nw)
  %code{%
    const char CLASS[] = "Math::Alglib::Interpolation::IdwInterpolant";
    RETVAL = new alglib::idwinterpolant();
    alglib::idwbuildmodifiedshepard(xy, n, nx, d, nq, nw, *RETVAL);
  %};

idwinterpolant*
idwbuildmodifiedshepardr(real_2d_array xy, const ae_int_t n, const ae_int_t nx, const double r)
  %code{%
    const char CLASS[] = "Math::Alglib::Interpolation::IdwInterpolant";
    RETVAL = new alglib::idwinterpolant();
    alglib::idwbuildmodifiedshepardr(xy, n, nx, r, *RETVAL);
  %};

idwinterpolant*
idwbuildnoisy(real_2d_array xy, const ae_int_t n, const ae_int_t nx,
              const ae_int_t d, const ae_int_t nq, const ae_int_t nw)
  %code{%
    const char CLASS[] = "Math::Alglib::Interpolation::IdwInterpolant";
    RETVAL = new alglib::idwinterpolant();
    alglib::idwbuildnoisy(xy, n, nx, d, nq, nw, *RETVAL);
  %};

//////////////////////////////////////////////////////////////////////
barycentricinterpolant*
barycentricbuildxyw(real_1d_array x, real_1d_array y, real_1d_array w, const ae_int_t n)
  %code{%
    const char CLASS[] = "Math::Alglib::Interpolation::BarycentricInterpolant";
    RETVAL = new alglib::barycentricinterpolant();
    alglib::barycentricbuildxyw(x, y, w, n, *RETVAL);
  %};

barycentricinterpolant*
barycentricbuildfloaterhormann(real_1d_array x, real_1d_array y, const ae_int_t n, const ae_int_t d)
  %code{%
    const char CLASS[] = "Math::Alglib::Interpolation::BarycentricInterpolant";
    RETVAL = new alglib::barycentricinterpolant();
    alglib::barycentricbuildfloaterhormann(x, y, n, d, *RETVAL);
  %};

barycentricinterpolant*
polynomialcheb2bar(real_1d_array t, const double a, const double b)
  %code{%
    const char CLASS[] = "Math::Alglib::Interpolation::BarycentricInterpolant";
    RETVAL = new alglib::barycentricinterpolant();
    alglib::polynomialcheb2bar(t, a, b, *RETVAL);
  %};

barycentricinterpolant*
polynomialpow2bar(real_1d_array a, const ae_int_t n, const double c, const double s)
  %code{%
    const char CLASS[] = "Math::Alglib::Interpolation::BarycentricInterpolant";
    RETVAL = new alglib::barycentricinterpolant();
    alglib::polynomialpow2bar(a, n, c, s, *RETVAL);
  %};

barycentricinterpolant*
polynomialbuild(real_1d_array x, real_1d_array y)
  %code{%
    const char CLASS[] = "Math::Alglib::Interpolation::BarycentricInterpolant";
    RETVAL = new alglib::barycentricinterpolant();
    alglib::polynomialbuild(x, y, *RETVAL);
  %};

barycentricinterpolant*
polynomialbuildcheb1(const double a, const double b, real_1d_array y)
  %alias{polynomialbuildeqdist = 1}
  %alias{polynomialbuildcheb2 = 2}
  %code{%
    const char CLASS[] = "Math::Alglib::Interpolation::BarycentricInterpolant";
    RETVAL = new alglib::barycentricinterpolant();
    if (ix == 0)
      alglib::polynomialbuildcheb1(a, b, y, *RETVAL);
    else if (ix == 1)
      alglib::polynomialbuildeqdist(a, b, y, *RETVAL);
    else
      alglib::polynomialbuildcheb2(a, b, y, *RETVAL);
  %};

//////////////////////////////////////////////////////////////////////

double polynomialcalceqdist(const double a, const double b, real_1d_array f, const double t);
double polynomialcalccheb1(const double a, const double b, real_1d_array f, const double t);
double polynomialcalccheb2(const double a, const double b, real_1d_array f, const double t);

//////////////////////////////////////////////////////////////////////
{%
AV *
polynomialfit(real_1d_array x, real_1d_array y, const ae_int_t m)
  CODE:
    sv_2mortal((SV *)RETVAL);
    alglib::polynomialfitreport rep;
    ae_int_t info;
    alglib::barycentricinterpolant *bary = new alglib::barycentricinterpolant();

    alglib::polynomialfit(x, y, m, info, *bary, rep);

    av_push(RETVAL, newSViv(info));
    av_push(RETVAL, ptr_to_perl_obj(aTHX_ bary, "Math::Alglib::Interpolation::BarycentricInterpolant"));
    av_push(RETVAL, polynomialfitreport_to_hvref(aTHX_ rep));
  OUTPUT: RETVAL
%}

{%
AV *
polynomialfitwc(real_1d_array x, real_1d_array y, real_1d_array w, real_1d_array xc, real_1d_array yc, integer_1d_array dc, const ae_int_t m)
  CODE:
    sv_2mortal((SV *)RETVAL);
    alglib::polynomialfitreport rep;
    ae_int_t info;
    alglib::barycentricinterpolant *bary = new alglib::barycentricinterpolant();

    alglib::polynomialfitwc(x, y, w, xc, yc, dc, m, info, *bary, rep);

    av_push(RETVAL, newSViv(info));
    av_push(RETVAL, ptr_to_perl_obj(aTHX_ bary, "Math::Alglib::Interpolation::BarycentricInterpolant"));
    av_push(RETVAL, polynomialfitreport_to_hvref(aTHX_ rep));
  OUTPUT: RETVAL
%}

{%
AV *
barycentricfitfloaterhormannwc(real_1d_array x, real_1d_array y, real_1d_array w, const ae_int_t n, real_1d_array xc, real_1d_array yc, integer_1d_array dc, const ae_int_t k, ae_int_t m)
  CODE:
    sv_2mortal((SV *)RETVAL);
    alglib::barycentricfitreport rep;
    ae_int_t info;
    alglib::barycentricinterpolant *bary = new alglib::barycentricinterpolant();

    alglib::barycentricfitfloaterhormannwc(x, y, w, n, xc, yc, dc, k, m, info, *bary, rep);

    av_push(RETVAL, newSViv(info));
    av_push(RETVAL, ptr_to_perl_obj(aTHX_ bary, "Math::Alglib::Interpolation::BarycentricInterpolant"));
    av_push(RETVAL, barycentricfitreport_to_hvref(aTHX_ rep));
  OUTPUT: RETVAL
%}

{%
AV *
barycentricfitfloaterhormann(real_1d_array x, real_1d_array y, const ae_int_t n, ae_int_t m)
  CODE:
    sv_2mortal((SV *)RETVAL);
    alglib::barycentricfitreport rep;
    ae_int_t info;
    alglib::barycentricinterpolant *bary = new alglib::barycentricinterpolant();

    alglib::barycentricfitfloaterhormann(x, y, n, m, info, *bary, rep);

    av_push(RETVAL, newSViv(info));
    av_push(RETVAL, ptr_to_perl_obj(aTHX_ bary, "Math::Alglib::Interpolation::BarycentricInterpolant"));
    av_push(RETVAL, barycentricfitreport_to_hvref(aTHX_ rep));
  OUTPUT: RETVAL
%}

AV *
lsfitlinearw(real_1d_array y, real_1d_array w, real_2d_array fmatrix)
  %code{%
    sv_2mortal((SV *)RETVAL);
    alglib::lsfitreport rep;
    ae_int_t info;
    real_1d_array c;

    alglib::lsfitlinearw(y, w, fmatrix, info, c, rep);

    av_push(RETVAL, newSViv(info));
    av_push(RETVAL, newRV_noinc((SV *)real_1d_array_to_av(aTHX_ c)));
    av_push(RETVAL, lsfitreport_to_hvref(aTHX_ rep));
  %};

AV *
lsfitlinearwc(real_1d_array y, real_1d_array w, real_2d_array fmatrix, real_2d_array cmatrix)
  %code{%
    sv_2mortal((SV *)RETVAL);
    alglib::lsfitreport rep;
    ae_int_t info;
    real_1d_array c;

    alglib::lsfitlinearwc(y, w, fmatrix, cmatrix, info, c, rep);

    av_push(RETVAL, newSViv(info));
    av_push(RETVAL, newRV_noinc((SV *)real_1d_array_to_av(aTHX_ c)));
    av_push(RETVAL, lsfitreport_to_hvref(aTHX_ rep));
  %};

AV *
lsfitlinear(real_1d_array y, real_2d_array fmatrix)
  %code{%
    sv_2mortal((SV *)RETVAL);
    alglib::lsfitreport rep;
    ae_int_t info;
    real_1d_array c;

    alglib::lsfitlinear(y, fmatrix, info, c, rep);

    av_push(RETVAL, newSViv(info));
    av_push(RETVAL, newRV_noinc((SV *)real_1d_array_to_av(aTHX_ c)));
    av_push(RETVAL, lsfitreport_to_hvref(aTHX_ rep));
  %};

AV *
lsfitlinearc(real_1d_array y, real_2d_array fmatrix, real_2d_array cmatrix)
  %code{%
    sv_2mortal((SV *)RETVAL);
    alglib::lsfitreport rep;
    ae_int_t info;
    real_1d_array c;

    alglib::lsfitlinearc(y, fmatrix, cmatrix, info, c, rep);

    av_push(RETVAL, newSViv(info));
    av_push(RETVAL, newRV_noinc((SV *)real_1d_array_to_av(aTHX_ c)));
    av_push(RETVAL, lsfitreport_to_hvref(aTHX_ rep));
  %};
